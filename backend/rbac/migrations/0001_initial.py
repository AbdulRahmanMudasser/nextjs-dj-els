# Generated by Django 4.2.7 on 2025-09-15 21:54

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ContextualPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('context_type', models.CharField(help_text='Type of context (course, department, etc.)', max_length=50)),
                ('context_id', models.PositiveIntegerField(help_text='ID of the context object')),
                ('granted_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(blank=True, help_text='When this permission expires', null=True)),
            ],
            options={
                'verbose_name': 'Contextual Permission',
                'verbose_name_plural': 'Contextual Permissions',
            },
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Human-readable permission name', max_length=200, unique=True)),
                ('codename', models.CharField(help_text='Permission codename for programmatic use', max_length=100, unique=True)),
                ('description', models.TextField(help_text='Detailed description of the permission')),
                ('resource_type', models.CharField(help_text='Type of resource this permission applies to', max_length=50)),
                ('action_type', models.CharField(choices=[('CREATE', 'Create'), ('READ', 'Read'), ('UPDATE', 'Update'), ('DELETE', 'Delete'), ('EXECUTE', 'Execute')], help_text='Type of action allowed', max_length=20)),
                ('is_system_permission', models.BooleanField(default=False, help_text='Whether this is a system-level permission')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Permission',
                'verbose_name_plural': 'Permissions',
                'ordering': ['resource_type', 'action_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Role name', max_length=100, unique=True)),
                ('code', models.CharField(help_text='Role code for programmatic use', max_length=50, unique=True)),
                ('description', models.TextField(help_text='Role description')),
                ('is_system_role', models.BooleanField(default=False, help_text='Whether this is a system-defined role')),
                ('priority', models.IntegerField(default=0, help_text='Role priority (higher number = higher priority)')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this role is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent_role', models.ForeignKey(blank=True, help_text='Parent role for hierarchy', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='child_roles', to='rbac.role')),
                ('permissions', models.ManyToManyField(blank=True, related_name='roles', to='rbac.permission')),
            ],
            options={
                'verbose_name': 'Role',
                'verbose_name_plural': 'Roles',
                'ordering': ['-priority', 'name'],
            },
        ),
        migrations.CreateModel(
            name='UserRoleAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scope_type', models.CharField(choices=[('GLOBAL', 'Global'), ('DEPARTMENT', 'Department'), ('COURSE', 'Course'), ('CUSTOM', 'Custom')], default='GLOBAL', help_text='Scope of the role assignment', max_length=20)),
                ('scope_object_id', models.PositiveIntegerField(blank=True, help_text='ID of the scope object', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this assignment is active')),
                ('start_date', models.DateTimeField(default=django.utils.timezone.now, help_text='When this assignment starts')),
                ('end_date', models.DateTimeField(blank=True, help_text='When this assignment ends', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_by', models.ForeignKey(blank=True, help_text='User who assigned this role', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_roles', to=settings.AUTH_USER_MODEL)),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_assignments', to='rbac.role')),
                ('scope_object_type', models.ForeignKey(blank=True, help_text='Type of the scope object', null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='role_assignments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Role Assignment',
                'verbose_name_plural': 'User Role Assignments',
            },
        ),
        migrations.CreateModel(
            name='PermissionTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Template name', max_length=200)),
                ('description', models.TextField(help_text='Template description')),
                ('is_default', models.BooleanField(default=False, help_text='Whether this is a default template')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('applies_to_role', models.ForeignKey(blank=True, help_text='Role this template applies to', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='templates', to='rbac.role')),
                ('permissions', models.ManyToManyField(related_name='templates', to='rbac.permission')),
            ],
            options={
                'verbose_name': 'Permission Template',
                'verbose_name_plural': 'Permission Templates',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PermissionAudit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(help_text='Action performed', max_length=100)),
                ('permission', models.CharField(help_text='Permission that was checked', max_length=100)),
                ('resource_type', models.CharField(help_text='Type of resource accessed', max_length=50)),
                ('resource_id', models.PositiveIntegerField(blank=True, help_text='ID of the resource', null=True)),
                ('result', models.CharField(choices=[('GRANTED', 'Granted'), ('DENIED', 'Denied'), ('ERROR', 'Error')], help_text='Result of the permission check', max_length=20)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP address of the request', null=True)),
                ('user_agent', models.CharField(blank=True, help_text='User agent string', max_length=500)),
                ('request_path', models.CharField(help_text='Request path', max_length=500)),
                ('additional_data', models.JSONField(blank=True, default=dict, help_text='Additional audit data')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='permission_audits', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Permission Audit',
                'verbose_name_plural': 'Permission Audits',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddIndex(
            model_name='permission',
            index=models.Index(fields=['codename'], name='rbac_permis_codenam_17df61_idx'),
        ),
        migrations.AddIndex(
            model_name='permission',
            index=models.Index(fields=['resource_type', 'action_type'], name='rbac_permis_resourc_7d4a56_idx'),
        ),
        migrations.AddIndex(
            model_name='permission',
            index=models.Index(fields=['is_system_permission'], name='rbac_permis_is_syst_cadffe_idx'),
        ),
        migrations.AddField(
            model_name='contextualpermission',
            name='granted_by',
            field=models.ForeignKey(blank=True, help_text='User who granted this permission', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='granted_permissions', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='contextualpermission',
            name='permission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contextual_grants', to='rbac.permission'),
        ),
        migrations.AddField(
            model_name='contextualpermission',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contextual_permissions', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='userroleassignment',
            index=models.Index(fields=['user', 'is_active'], name='rbac_userro_user_id_981740_idx'),
        ),
        migrations.AddIndex(
            model_name='userroleassignment',
            index=models.Index(fields=['role', 'is_active'], name='rbac_userro_role_id_cf53dc_idx'),
        ),
        migrations.AddIndex(
            model_name='userroleassignment',
            index=models.Index(fields=['scope_type', 'scope_object_id'], name='rbac_userro_scope_t_f571b9_idx'),
        ),
        migrations.AddIndex(
            model_name='userroleassignment',
            index=models.Index(fields=['start_date', 'end_date'], name='rbac_userro_start_d_f36730_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userroleassignment',
            unique_together={('user', 'role', 'scope_type', 'scope_object_id', 'scope_object_type')},
        ),
        migrations.AddIndex(
            model_name='role',
            index=models.Index(fields=['code'], name='rbac_role_code_7dbf08_idx'),
        ),
        migrations.AddIndex(
            model_name='role',
            index=models.Index(fields=['is_system_role'], name='rbac_role_is_syst_76b3e7_idx'),
        ),
        migrations.AddIndex(
            model_name='role',
            index=models.Index(fields=['is_active'], name='rbac_role_is_acti_5a2fc4_idx'),
        ),
        migrations.AddIndex(
            model_name='role',
            index=models.Index(fields=['priority'], name='rbac_role_priorit_72cb5b_idx'),
        ),
        migrations.AddIndex(
            model_name='permissionaudit',
            index=models.Index(fields=['user', 'timestamp'], name='rbac_permis_user_id_76c70d_idx'),
        ),
        migrations.AddIndex(
            model_name='permissionaudit',
            index=models.Index(fields=['permission', 'result'], name='rbac_permis_permiss_bc1b86_idx'),
        ),
        migrations.AddIndex(
            model_name='permissionaudit',
            index=models.Index(fields=['resource_type', 'resource_id'], name='rbac_permis_resourc_b5cc90_idx'),
        ),
        migrations.AddIndex(
            model_name='permissionaudit',
            index=models.Index(fields=['timestamp'], name='rbac_permis_timesta_996b7e_idx'),
        ),
        migrations.AddIndex(
            model_name='contextualpermission',
            index=models.Index(fields=['user', 'context_type', 'context_id'], name='rbac_contex_user_id_d14cc3_idx'),
        ),
        migrations.AddIndex(
            model_name='contextualpermission',
            index=models.Index(fields=['expires_at'], name='rbac_contex_expires_70c1fa_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='contextualpermission',
            unique_together={('user', 'permission', 'context_type', 'context_id')},
        ),
    ]
