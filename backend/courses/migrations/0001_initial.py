# Generated by Django 4.2.7 on 2025-09-15 20:41

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('academics', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Course name (e.g., Data Structures and Algorithms)', max_length=200)),
                ('code', models.CharField(help_text='Course code (e.g., CS201)', max_length=20, unique=True)),
                ('credit_hours', models.PositiveIntegerField(help_text='Credit hours for this course', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(6)])),
                ('course_type', models.CharField(choices=[('CORE', 'Core'), ('ELECTIVE', 'Elective'), ('LAB', 'Laboratory'), ('PROJECT', 'Project'), ('THESIS', 'Thesis')], default='CORE', max_length=20)),
                ('level', models.CharField(choices=[('UNDERGRADUATE', 'Undergraduate'), ('GRADUATE', 'Graduate'), ('POSTGRADUATE', 'Postgraduate')], default='UNDERGRADUATE', max_length=20)),
                ('description', models.TextField(help_text='Course description')),
                ('syllabus_file', models.FileField(blank=True, null=True, upload_to='syllabi/')),
                ('learning_outcomes', models.TextField(help_text='Learning outcomes for this course')),
                ('is_active', models.BooleanField(default=True, help_text='Whether course is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('corequisites', models.ManyToManyField(blank=True, related_name='corequisite_for', to='courses.course')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='academics.department')),
                ('prerequisites', models.ManyToManyField(blank=True, related_name='prerequisite_for', to='courses.course')),
            ],
            options={
                'verbose_name': 'Course',
                'verbose_name_plural': 'Courses',
                'ordering': ['department', 'code'],
            },
        ),
        migrations.CreateModel(
            name='CourseOffering',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('section', models.CharField(help_text='Section identifier (e.g., A, B, C)', max_length=10)),
                ('max_enrollment', models.PositiveIntegerField(help_text='Maximum number of students')),
                ('current_enrollment', models.PositiveIntegerField(default=0, help_text='Current number of enrolled students')),
                ('class_schedule', models.JSONField(default=dict, help_text='Class schedule (days, times, rooms)')),
                ('room_number', models.CharField(help_text='Classroom number', max_length=50)),
                ('meeting_pattern', models.CharField(help_text='Meeting pattern (e.g., MWF, TTH)', max_length=20)),
                ('start_time', models.TimeField(help_text='Class start time')),
                ('end_time', models.TimeField(help_text='Class end time')),
                ('enrollment_open', models.BooleanField(default=True, help_text='Whether enrollment is open')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='offerings', to='courses.course')),
                ('instructor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='taught_offerings', to=settings.AUTH_USER_MODEL)),
                ('semester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='course_offerings', to='academics.semester')),
            ],
            options={
                'verbose_name': 'Course Offering',
                'verbose_name_plural': 'Course Offerings',
                'ordering': ['semester', 'course', 'section'],
            },
        ),
        migrations.CreateModel(
            name='CourseModule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('order', models.PositiveIntegerField()),
                ('is_published', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='modules', to='courses.course')),
            ],
            options={
                'verbose_name': 'Course Module',
                'verbose_name_plural': 'Course Modules',
                'ordering': ['course', 'order'],
            },
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrollment_date', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('ENROLLED', 'Enrolled'), ('DROPPED', 'Dropped'), ('COMPLETED', 'Completed'), ('WITHDRAWN', 'Withdrawn'), ('AUDIT', 'Audit')], default='ENROLLED', max_length=20)),
                ('grade', models.CharField(blank=True, choices=[('A+', 'A+'), ('A', 'A'), ('A-', 'A-'), ('B+', 'B+'), ('B', 'B'), ('B-', 'B-'), ('C+', 'C+'), ('C', 'C'), ('C-', 'C-'), ('D+', 'D+'), ('D', 'D'), ('F', 'F'), ('W', 'Withdrawn'), ('I', 'Incomplete')], max_length=5, null=True)),
                ('grade_points', models.DecimalField(blank=True, decimal_places=2, max_digits=3, null=True)),
                ('attendance_percentage', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('is_audit', models.BooleanField(default=False, help_text='Whether this is an audit enrollment')),
                ('drop_date', models.DateTimeField(blank=True, null=True)),
                ('completion_date', models.DateTimeField(blank=True, null=True)),
                ('course_offering', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='courses.courseoffering')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Enrollment',
                'verbose_name_plural': 'Enrollments',
                'ordering': ['-enrollment_date'],
                'indexes': [models.Index(fields=['student', 'status'], name='courses_enr_student_c86bf5_idx'), models.Index(fields=['course_offering', 'status'], name='courses_enr_course__e9584c_idx'), models.Index(fields=['enrollment_date'], name='courses_enr_enrollm_eb8905_idx')],
                'unique_together': {('student', 'course_offering')},
            },
        ),
        migrations.AddIndex(
            model_name='courseoffering',
            index=models.Index(fields=['semester', 'course'], name='courses_cou_semeste_e0a9ee_idx'),
        ),
        migrations.AddIndex(
            model_name='courseoffering',
            index=models.Index(fields=['instructor', 'semester'], name='courses_cou_instruc_36d457_idx'),
        ),
        migrations.AddIndex(
            model_name='courseoffering',
            index=models.Index(fields=['enrollment_open'], name='courses_cou_enrollm_5f5429_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='courseoffering',
            unique_together={('course', 'semester', 'section')},
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['code'], name='courses_cou_code_612388_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['department', 'is_active'], name='courses_cou_departm_352b34_idx'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['course_type', 'level'], name='courses_cou_course__5a50b1_idx'),
        ),
    ]
