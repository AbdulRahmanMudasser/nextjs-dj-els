# Generated by Django 4.2.7 on 2025-09-15 20:41

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('courses', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Assignment title', max_length=200)),
                ('description', models.TextField(help_text='Assignment description')),
                ('assignment_type', models.CharField(choices=[('HOMEWORK', 'Homework'), ('QUIZ', 'Quiz'), ('EXAM', 'Exam'), ('PROJECT', 'Project'), ('LAB', 'Laboratory'), ('PRESENTATION', 'Presentation'), ('REPORT', 'Report')], help_text='Type of assignment', max_length=20)),
                ('total_points', models.DecimalField(decimal_places=2, help_text='Total points for this assignment', max_digits=6, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('due_date', models.DateTimeField(help_text='Assignment due date and time')),
                ('late_submission_allowed', models.BooleanField(default=True, help_text='Whether late submissions are allowed')),
                ('late_penalty_percentage', models.DecimalField(decimal_places=2, default=Decimal('10.00'), help_text='Late penalty percentage', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))])),
                ('max_attempts', models.PositiveIntegerField(default=1, help_text='Maximum number of submission attempts', validators=[django.core.validators.MinValueValidator(1)])),
                ('is_group_assignment', models.BooleanField(default=False, help_text='Whether this is a group assignment')),
                ('max_group_size', models.PositiveIntegerField(blank=True, help_text='Maximum group size (if group assignment)', null=True, validators=[django.core.validators.MinValueValidator(2)])),
                ('instructions', models.TextField(help_text='Detailed assignment instructions')),
                ('attachments', models.JSONField(default=list, help_text='Assignment attachment URLs')),
                ('rubric', models.JSONField(blank=True, default=dict, help_text='Grading rubric', null=True)),
                ('auto_grade', models.BooleanField(default=False, help_text='Whether assignment can be auto-graded')),
                ('published', models.BooleanField(default=False, help_text='Whether assignment is published to students')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course_offering', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='courses.courseoffering')),
            ],
            options={
                'verbose_name': 'Assignment',
                'verbose_name_plural': 'Assignments',
                'ordering': ['course_offering', 'due_date'],
            },
        ),
        migrations.CreateModel(
            name='Submission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submission_date', models.DateTimeField(auto_now_add=True)),
                ('content', models.TextField(blank=True, help_text='Text content submission', null=True)),
                ('files', models.JSONField(default=list, help_text='Submitted file URLs')),
                ('is_late', models.BooleanField(default=False, help_text='Whether submission is late')),
                ('attempt_number', models.PositiveIntegerField(default=1, help_text='Submission attempt number')),
                ('plagiarism_score', models.DecimalField(blank=True, decimal_places=2, help_text='Plagiarism detection score', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))])),
                ('plagiarism_report', models.JSONField(blank=True, default=dict, help_text='Plagiarism detection report', null=True)),
                ('grade', models.DecimalField(blank=True, decimal_places=2, help_text='Assignment grade', max_digits=6, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('graded_at', models.DateTimeField(blank=True, help_text='When submission was graded', null=True)),
                ('feedback', models.TextField(blank=True, help_text='Instructor feedback', null=True)),
                ('is_group_submission', models.BooleanField(default=False, help_text='Whether this is a group submission')),
                ('assignment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to='assignments.assignment')),
                ('graded_by', models.ForeignKey(blank=True, help_text='User who graded this submission', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='graded_submissions', to=settings.AUTH_USER_MODEL)),
                ('group_members', models.ManyToManyField(blank=True, help_text='Other group members (excluding submitter)', related_name='group_submissions', to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Submission',
                'verbose_name_plural': 'Submissions',
                'ordering': ['-submission_date'],
                'indexes': [models.Index(fields=['assignment', 'student'], name='assignments_assignm_6c6845_idx'), models.Index(fields=['submission_date'], name='assignments_submiss_0ebef4_idx'), models.Index(fields=['is_late'], name='assignments_is_late_ba004a_idx'), models.Index(fields=['grade'], name='assignments_grade_e0bb57_idx')],
                'unique_together': {('assignment', 'student', 'attempt_number')},
            },
        ),
        migrations.AddIndex(
            model_name='assignment',
            index=models.Index(fields=['course_offering', 'due_date'], name='assignments_course__45ac2f_idx'),
        ),
        migrations.AddIndex(
            model_name='assignment',
            index=models.Index(fields=['published', 'due_date'], name='assignments_publish_e87735_idx'),
        ),
        migrations.AddIndex(
            model_name='assignment',
            index=models.Index(fields=['assignment_type'], name='assignments_assignm_1d493f_idx'),
        ),
    ]
